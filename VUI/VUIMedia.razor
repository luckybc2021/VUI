@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

@inherits VUIElement


<div @onclick="InternalOnClicked"
     @onmouseenter="InternalOnMouseEnter"
     @onmouseleave="InternalOnMouseLeave"
     @onmouseup="InternalOnMouseUp"
     @onmousedown="InternalOnMouseDown"
     style="background-color:@BackgroundColor;
                    color:@Color;
                    border:@Border;
                    display:@Display;
                    width:@Width;
                    height:@Height;
                    position:@Position;
                    vertical-align:@VerticalAlign;
                    cursor:@Cursor;
                    justify-content:@JustifyContent;
                    align-items:@AlignItems;
                    margin:@Margin;
                    z-index:@Z_Index;
                    top:@Top
                    left:@Left;
                    bottom:@Bottom;
                    right:@Right;

                    transform:@Transform;

                    flex-flow:@FlexFlow;
                    flex-direction:@FlexFlow;
                    overflow:@OverFlow;
                    padding:@Padding;

                    user-select:none;">
    
    @switch (ContentType)
    {
        case "Image":

            <img id="@MediaID" draggable="false" src="@Path" />
            break;

        case "Video":

            <video id="@MediaID"
                   disablePictureInPicture
                   src="@Path"
                   @onplay="InternalOnPlay"
                   @onpause="InternalOnPause"
                   @onended="InternalOnEnded"
                   @ontimeupdate="InternalOnTimeUpdate"
                   style="max-width: 100vw; max-height: 100vw;
                          position: absolute;
                          top: 50%; left: 50%; vertical-align: top;
                          transform: translate(-50%, -50%);" />
            break;
    }
</div>



<script>
    window.playMedia = (MediaID) => {
        var media = document.getElementById(MediaID);

        if (media) {
            media.play();
        }
    }

    window.pauseMedia = (MediaID) => {
        var media = document.getElementById(MediaID);

        if (media) {
            media.pause();
        }

    }

    window.setPlaybackRate = (MediaID, playbackSpeed) => {
        var media = document.getElementById(MediaID);

        if (media) {
            media.playbackRate = playbackSpeed;
        }
    }

    window.getPlaybackRate = (MediaID) => {

        return new Promise((resolve) => {
            var media = document.getElementById(MediaID);

            if (media) {
                media.onloadedmetadata = function () {
                    resolve(media.playbackRate);
                };
            }
        });
    }


    window.getMediaDuration = (MediaID) => {

        return new Promise((resolve) => {
            var media = document.getElementById(MediaID);

            if (media) {
                media.onloadedmetadata = function () {
                    resolve(media.duration);
                };
            }
        });
    }


    window.getMediaCurrentTime = (MediaID) => {
        return new Promise((resolve) => {
            var media = document.getElementById(MediaID);

            if (media) {
                if (media.readyState >= 1) {
                    // If the metadata is already loaded, resolve the promise immediately
                    resolve(media.currentTime);
                } else {
                    // Otherwise, wait for the 'loadedmetadata' event
                    media.onloadedmetadata = function () {
                        resolve(media.currentTime);
                    };
                }
            }
        });
    }


    window.setMediaCurrentTime = (MediaID, _t) => {
        var media = document.getElementById(MediaID);

        if (media && media.readyState >= 1) {
            // If the metadata is already loaded, resolve the promise immediately
            media.currentTime = _t;
        }
    }


</script>